use ppcasm::{ppcasm};

#[test]
fn test_ppcasm()
{
    let asm = ppcasm!(0x0, { nop });
    assert_eq!(asm.encoded_bytes(), &[0x60, 0x00, 0x00, 0x00]);

    let asm = ppcasm!(0x4, { b 0x6c });
    assert_eq!(asm.encoded_bytes(), &[0x48, 0x00, 0x00, 0x68]);

    let asm = ppcasm!(0x0, {
            b next;
        next:
            nop
    });
    assert_eq!(&asm.encoded_bytes()[..4], &[0x48, 0x00, 0x00, 0x04]);

    let asm = ppcasm!(0x0, { mflr r6 });
    assert_eq!(asm.encoded_bytes(), &[0x7c, 0xc8, 0x02, 0xa6]);

    let asm = ppcasm!(0x10000, { beq @{ 0x9c - 0x24 }; });
    assert_eq!(asm.encoded_bytes(), &[0x41, 0x82, 0x00, 0x78]);

    let asm = ppcasm!(0x0, { cntlzw  r0, r0; });
    assert_eq!(asm.encoded_bytes(), &[0x7c, 0x00, 0x00, 0x34]);

    let asm = ppcasm!(0x0, { lis     r4, {ppcasm::upper_bits(0x158f0000)} });
    assert_eq!(asm.encoded_bytes(), &[0x3C, 0x80, 0x15, 0x8F]);

    let asm = ppcasm!(0x0, {
        lwz     r3, 2232(r25);
        lwz     r3, 0(r3);
        lwz     r4, 220(r3);
        lwz     r5, 212(r3);
        addc    r4, r4, r5;
        lwz     r5, 228(r3);
        addc    r4, r4, r5;
        rlwinm  r4, r4, 2, 0, 29;
        bl      0x24;
        mflr    r6;
        addc    r6, r4, r6;
        lfs     f0, 16(r6);
        b       0x9c;
        .float 0.0;
        .float 0.1;
        .float 0.2;
        .float 0.5;
    });
    assert_eq!(&asm.encoded_bytes()[..], &[
        0x80, 0x79, 0x08, 0xb8u8,
        0x80, 0x63, 0x00, 0x00,
        0x80, 0x83, 0x00, 0xdc,
        0x80, 0xa3, 0x00, 0xd4,
        0x7c, 0x84, 0x28, 0x14,
        0x80, 0xa3, 0x00, 0xe4,
        0x7c, 0x84, 0x28, 0x14,
        0x54, 0x84, 0x10, 0x3a,
        0x48, 0x00, 0x00, 0x05,
        0x7c, 0xc8, 0x02, 0xa6,
        0x7c, 0xc4, 0x30, 0x14,
        0xc0, 0x06, 0x00, 0x10,
        0x48, 0x00, 0x00, 0x6c,
        0x00, 0x00, 0x00, 0x00,
        0x3d, 0xcc, 0xcc, 0xcd,
        0x3e, 0x4c, 0xcc, 0xcd,
        0x3f, 0x00, 0x00, 0x00,
    ] as &[u8]);

    let asm = ppcasm!(0x0, {
        .asciiz b"%03d/%03d";
    });
    assert_eq!(&asm.encoded_bytes()[..], &[
        0x25, 0x30, 0x33, 0x64,
        0x2f, 0x25, 0x30, 0x33,
        0x64, 0x00, 0x00, 0x00,
    ]);
}
